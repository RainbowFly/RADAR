#-*- coding:utf-8 -*-
from PyQt4.QtGui import *
from PyQt4.QtCore import *
import sys,os

'''
本模块用于实现雷达画面的初始图
'''

#导入其他模块
gRootDir = os.path.join(os.getcwd(), "..")#得到当前脚本工作目录
sys.path.append(gRootDir)#添加到系统
from Radar_data.Radar_data import RadarData#导入模块

gEchoLineCountAFrame = 2048

class RadarWidget(QWidget):
    mFrameIndex = 0

    def __init__(self, parent = None):
        QWidget.__init__(self,parent)

        self.resize(600,600)
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.setSizePolicy(sizePolicy)

        self.mPixmap = QPixmap(self.width(), self.height())
        self.mPixmap.fill(Qt.black)
        self.mRadar_data = RadarData()

        center = QPoint(self.width()/2,self.height()/2)
        radius = 0
        if self.width() <self.height():
            radius = self.width()
        radius = self.height()
        radius /= 2

        self.mRadar_data.SetCenter(center)
        self.mRadar_data.SetRange('3 nm')
        self.mRadar_data.SetRadius(radius)

    def resizeEvent(self,event):
        center = QPoint(self.width()/2, self.height()/2)
        radius = 0
        if self.width() < self.height():
            radius = self.width()
        radius = self.height()
        radius /= 2
        self.mRadar_data.SetCenter(center)
        self.mRadar_data.SetRadius(radius)
        self.mPixmap = QPixmap(self.width(),self.height())
        self.mPixmap.fill(Qt.black)

    def paintEvent(self, event): 
        # 回波绘制 绘制到后台缓存
        painterToPixmap = QPainter(self.mPixmap)
        self.mRadar_data.Draw(painterToPixmap)

        painter = QPainter(self)
        painter.drawPixmap(0, 0, self.width(), self.height(), self.mPixmap)

    def PlayAFrame(self, echoFileName):
        echoFile = open(echoFileName, "r")

        # 偏移到 本帧处
        echoSetStrs = self.ReadAFrame(echoFile)
        self.mRadar_data.SetData(echoSetStrs)

        echoFile.close()
        self.mFrameIndex += 1 
        
        while True:
            self.repaint()

    def ReadAFrame(self, f):
        data = []

        i = 0
        while i < gEchoLineCountAFrame:
            line = f.readline()
            data.append(line)
            i += 1

        return data


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = RadarWidget()
    win.show()
    sys.exit(app.exec_())
